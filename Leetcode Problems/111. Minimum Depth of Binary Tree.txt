/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    // Time Complexity: O(V + E)
    // Space Complexity: O(V)
    public int minDepth(TreeNode root) {
        // If tree is empty, the depth is 0
        if (root == null) {
            return 0;
        }

        Queue<TreeNode> treeQueue = new ArrayDeque<>();

        // minDepth starts at 1 to account for root node
        int minDepth = 1;

        treeQueue.offer(root);

        while(!treeQueue.isEmpty()) {
            int levelSize = treeQueue.size();
            
            // Iterate through all nodes in the level
            for (int i = 0; i < levelSize; i++) {
                // Get the node
                TreeNode node = treeQueue.poll();
                
                // Check if it's a leaf, meaning we've reached minDepth
                if (node.left == null && node.right == null) {
                    return minDepth;
                }

                // Add left and right nodes of the next level to the queue 
                if (node.left != null) {
                    treeQueue.offer(node.left);
                }

                if (node.right != null) {
                    treeQueue.offer(node.right);
                }
            }

            minDepth++;
        }

        return minDepth;
    }
}