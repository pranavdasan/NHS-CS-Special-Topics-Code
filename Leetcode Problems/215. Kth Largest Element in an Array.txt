class Solution {
    // Time Complexity: O(N * logK) [For loop: O(n), adding to a heap: O(logK)]
    //Space Complexity: O(K) 
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue minHeap = new PriorityQueue();
        
for (int num : nums) {
            minHeap.add(num);

            if (minHeap.size() > k) {
                minHeap.remove();
            }
        }

        return (int) minHeap.peek();

    }
}