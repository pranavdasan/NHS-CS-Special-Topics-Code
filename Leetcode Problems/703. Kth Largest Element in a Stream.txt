class KthLargest {
    PriorityQueue<Integer> minHeap;
    int k;

    public KthLargest(int k, int[] nums) {
        this.k = k;
        minHeap = new PriorityQueue<>();

        // Add all the initial numbers of nums list to the minHeap
        for (int num : nums) {
            add(num);
        }
    }   
    
    // Time Complexity: O(log n) (time complexity to add or remove in a heap)
    // Space Complexity: O(n)
    public int add(int val) {
        minHeap.add(val);

        // This means the minHeap is more than full, 
        // so remove a val so that heap root is Kth largest value
        if (minHeap.size() > k) {
            minHeap.remove();
        }

        // Return root of the heap, which should be the Kth largest element
        return minHeap.peek();
    }
}

/**
 * Your KthLargest object will be instantiated and called as such:
 * KthLargest obj = new KthLargest(k, nums);
 * int param_1 = obj.add(val);
 */