// Time Complexity: O(2^n)
// Space Complexity: O(n)
class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> combinations = new ArrayList<>();

        generateCombination(0, 0, "", n, combinations);

        return combinations;        
    }

    private void generateCombination(int numOpenP, int numCloseP, String currCombination, int n, List<String> combinations) {
        if (numOpenP == numCloseP && numOpenP == n) {
            combinations.add(currCombination);
            return;
        }

        if (numOpenP < n) {
            generateCombination(numOpenP + 1, numCloseP, currCombination + "(", n, combinations);
        }

        if (numCloseP < numOpenP) {
            generateCombination(numOpenP, numCloseP + 1, currCombination + ")", n, combinations);
        }
    }    
}